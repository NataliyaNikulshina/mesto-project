Index: src/components/validate.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const hasInvalidInput = (inputList) => {\n    return inputList.some((inputElement) => {\n      return !inputElement.validity.valid;\n    })\n  }; \n  \nconst toggleButtonState = (inputList, buttonElement) => {\n    if (hasInvalidInput(inputList)) {\n      addButtonDisabled(buttonElement);\n      }\n    else {\n        buttonElement.classList.remove(validationConfig.inactiveButtonClass);\n        buttonElement.removeAttribute('disabled');\n      }\n  }\n\nexport const addButtonDisabled = (buttonElement) => {\n      buttonElement.classList.add(validationConfig.inactiveButtonClass);\n      buttonElement.setAttribute('disabled', true);\n}\n  \nconst showInputError = (formElement, inputElement, errorMessage) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.add(validationConfig.inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(validationConfig.errorClass);\n  };\n  \nconst hideInputError = (formElement, inputElement) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.remove(validationConfig.inputErrorClass);\n    errorElement.classList.remove(validationConfig.errorClass);\n    errorElement.textContent = '';\n  };\n  \nconst checkInputValidity = (formElement, inputElement) => {\n    if (inputElement.validity.patternMismatch) {\n      inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n    } else {\n      inputElement.setCustomValidity(\"\");\n    } \n    if (!inputElement.validity.valid) {\n      showInputError(formElement, inputElement, inputElement.validationMessage);\n    } \n    else {\n      hideInputError(formElement, inputElement);\n    }\n  };\n  \nconst setEventListeners = (formElement) => {\n    const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\n    toggleButtonState(inputList, buttonElement);\n    //console.log(buttonElement);\n    inputList.forEach((inputElement) => {\n      inputElement.addEventListener('input', function () {\n        checkInputValidity(formElement, inputElement);\n        toggleButtonState(inputList, buttonElement);\n      });\n    })\n};\n  \nexport const validationConfig = ({\n  formSelector: '.popup__container',\n  fieldsetSelector: '.popup__user-info',\n  inputSelector: '.popup__item',\n  submitButtonSelector: '.popup__button-save',\n  inactiveButtonClass: 'popup__button-save_inactive',\n  inputErrorClass: 'popup__item_type_error',\n  errorClass: 'popup__input-error_active'\n}); \n\nexport const enableValidation = (validationConfig) => {\n    const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));\n    formList.forEach((formElement) => {\n      //console.log(formList);\n      formElement.addEventListener('submit', function (evt) {\n        const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\n        const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\n        evt.preventDefault();\n        toggleButtonState(inputList, buttonElement);\n      });\n      const fieldsetList = Array.from(formElement.querySelectorAll(validationConfig.fieldsetSelector));\n      fieldsetList.forEach ((fieldSet) => {\n       setEventListeners(fieldSet);\n      });\n    });\n  };\n\n//удаление ошибок при открытии формы\nexport const handleErrorOpenForm = (popup) => {\n  const errorElements = Array.from(popup.querySelectorAll('.popup__input-error'));\n  errorElements.forEach((errEl) => {\n      errEl.textContent = '';\n  });\n  const inputElements = Array.from(popup.querySelectorAll('.popup__item'));\n  inputElements.forEach((inpEl) => {\n      inpEl.setCustomValidity(\"\");\n      inpEl.classList.remove(validationConfig.inputErrorClass);\n  });\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/validate.js b/src/components/validate.js
--- a/src/components/validate.js	(revision 8c406c6a246d3b45813d6075cc04864f3ed98ff7)
+++ b/src/components/validate.js	(date 1666300921026)
@@ -1,101 +1,148 @@
-const hasInvalidInput = (inputList) => {
+/*
+const validationConfig = {
+  formSelector: '.popup__container',
+  fieldsetSelector: '.popup__user-info',
+  inputSelector: '.popup__item',
+  submitButtonSelector: '.popup__button-save',
+  inactiveButtonClass: 'popup__button-save_inactive',
+  inputErrorClass: 'popup__item_type_error',
+  errorClass: 'popup__input-error_active'
+};*/
+
+const formEditProfile = document.querySelector('.popup__container_type_edit-profile');
+
+class FormValidator {
+  constructor(validationConfig, formElement) {
+    this._formSelector = validationConfig.formSelector;
+    this._fieldsetSelector = validationConfig.fieldsetSelector;
+    this._inputSelector = validationConfig.inputSelector;
+    this._submitButtonSelector = validationConfig.submitButtonSelector;
+    this._inactiveButtonClass = validationConfig.inactiveButtonClass;
+    this._inputErrorClass = validationConfig.inputErrorClass;
+    this._errorClass = validationConfig.errorClass;
+    this._formElement = formElement;
+  }
+
+
+
+  _hasInvalidInput(inputList) {
     return inputList.some((inputElement) => {
       return !inputElement.validity.valid;
     })
-  }; 
-  
-const toggleButtonState = (inputList, buttonElement) => {
-    if (hasInvalidInput(inputList)) {
-      addButtonDisabled(buttonElement);
-      }
+  };
+
+  _toggleButtonState(inputList, buttonElement) {
+    if (this._hasInvalidInput(inputList)) {
+      this.addButtonDisabled(buttonElement);
+    }
     else {
-        buttonElement.classList.remove(validationConfig.inactiveButtonClass);
-        buttonElement.removeAttribute('disabled');
-      }
+      buttonElement.classList.remove(this._inactiveButtonClass);
+      buttonElement.removeAttribute('disabled');
+    }
   }
 
-export const addButtonDisabled = (buttonElement) => {
-      buttonElement.classList.add(validationConfig.inactiveButtonClass);
-      buttonElement.setAttribute('disabled', true);
-}
-  
-const showInputError = (formElement, inputElement, errorMessage) => {
-    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);
-    inputElement.classList.add(validationConfig.inputErrorClass);
+  addButtonDisabled(buttonElement) {
+    buttonElement.classList.add(this._inactiveButtonClass);
+    buttonElement.setAttribute('disabled', true);
+    console.log('yaaaaa!')
+  }
+
+  _showInputError(formElement, inputElement, errorMessage) {
+    const errorElement = this._formElement.querySelector(`.${inputElement.id}-error`);
+    inputElement.classList.add(this._inputErrorClass);
     errorElement.textContent = errorMessage;
-    errorElement.classList.add(validationConfig.errorClass);
+    errorElement.classList.add(this._errorClass);
   };
-  
-const hideInputError = (formElement, inputElement) => {
+
+  _hideInputError(formElement, inputElement) {
     const errorElement = formElement.querySelector(`.${inputElement.id}-error`);
-    inputElement.classList.remove(validationConfig.inputErrorClass);
-    errorElement.classList.remove(validationConfig.errorClass);
+    inputElement.classList.remove(this._inputErrorClass);
+    errorElement.classList.remove(this._errorClass);
     errorElement.textContent = '';
   };
-  
-const checkInputValidity = (formElement, inputElement) => {
-    if (inputElement.validity.patternMismatch) {
+
+  _checkInputValidity(formElement, inputElement) {
+    console.log(inputElement.validity)
+    console.log(inputElement)
+    console.log(formElement)
+       if (inputElement.validity.patternMismatch) {
       inputElement.setCustomValidity(inputElement.dataset.errorMessage);
+      console.log('hi! :)')
     } else {
       inputElement.setCustomValidity("");
-    } 
+    }
     if (!inputElement.validity.valid) {
-      showInputError(formElement, inputElement, inputElement.validationMessage);
-    } 
+      this._showInputError(formElement, inputElement, inputElement.validationMessage);
+    }
     else {
-      hideInputError(formElement, inputElement);
+      this._hideInputError(formElement, inputElement);
     }
+
   };
-  
-const setEventListeners = (formElement) => {
-    const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));
-    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);
-    toggleButtonState(inputList, buttonElement);
-    //console.log(buttonElement);
+
+  _setEventListeners(formElement) {
+    const inputList = Array.from(formElement.querySelectorAll(this._inputSelector));
+    const buttonElement = formElement.querySelector(this._submitButtonSelector);
+    this._toggleButtonState(inputList, buttonElement);
     inputList.forEach((inputElement) => {
-      inputElement.addEventListener('input', function () {
-        checkInputValidity(formElement, inputElement);
-        toggleButtonState(inputList, buttonElement);
-      });
+      inputElement.addEventListener('input',
+
+     //   function () {
+        //console.log(inputElement)
+        //console.log(formElement)
+
+        this._checkInputValidity.bind(formElement, inputElement)
+         this._toggleButtonState.bind(inputList, buttonElement);
+     // }
+
+
+      );
     })
-};
-  
-export const validationConfig = ({
-  formSelector: '.popup__container',
-  fieldsetSelector: '.popup__user-info',
-  inputSelector: '.popup__item',
-  submitButtonSelector: '.popup__button-save',
-  inactiveButtonClass: 'popup__button-save_inactive',
-  inputErrorClass: 'popup__item_type_error',
-  errorClass: 'popup__input-error_active'
-}); 
+  };
 
-export const enableValidation = (validationConfig) => {
-    const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));
+  enableValidation(validationConfig) {
+    const formList = Array.from(document.querySelectorAll(this._formSelector));
     formList.forEach((formElement) => {
-      //console.log(formList);
       formElement.addEventListener('submit', function (evt) {
-        const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));
-        const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);
+        const inputList = Array.from(formElement.querySelectorAll(this._inputSelector));
+        const buttonElement = formElement.querySelector(this._submitButtonSelector);
         evt.preventDefault();
-        toggleButtonState(inputList, buttonElement);
+        this._toggleButtonState(inputList, buttonElement);
       });
-      const fieldsetList = Array.from(formElement.querySelectorAll(validationConfig.fieldsetSelector));
+      const fieldsetList = Array.from(formElement.querySelectorAll(this._fieldsetSelector));
       fieldsetList.forEach ((fieldSet) => {
-       setEventListeners(fieldSet);
+        this._setEventListeners(fieldSet);
       });
     });
   };
 
 //удаление ошибок при открытии формы
-export const handleErrorOpenForm = (popup) => {
-  const errorElements = Array.from(popup.querySelectorAll('.popup__input-error'));
-  errorElements.forEach((errEl) => {
+  handleErrorOpenForm = (popup) => {
+    const errorElements = Array.from(popup.querySelectorAll('.popup__input-error'));
+    errorElements.forEach((errEl) => {
       errEl.textContent = '';
-  });
-  const inputElements = Array.from(popup.querySelectorAll('.popup__item'));
-  inputElements.forEach((inpEl) => {
+    });
+    const inputElements = Array.from(popup.querySelectorAll('.popup__item'));
+    inputElements.forEach((inpEl) => {
       inpEl.setCustomValidity("");
-      inpEl.classList.remove(validationConfig.inputErrorClass);
-  });
-};
\ No newline at end of file
+      inpEl.classList.remove(this._inputErrorClass);
+    });
+    console.log('ya!')
+  };
+}
+
+
+export const validation = new FormValidator({
+  formSelector: '.popup__container',
+  fieldsetSelector: '.popup__user-info',
+  inputSelector: '.popup__item',
+  submitButtonSelector: '.popup__button-save',
+  inactiveButtonClass: 'popup__button-save_inactive',
+  inputErrorClass: 'popup__item_type_error',
+  errorClass: 'popup__input-error_active'
+  }, {formEditProfile})
+
+
+console.log(validation)
+
+
